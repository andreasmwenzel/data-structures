abstract class Heap{
  values: number[] = [];
  get size(): number {
    return this.values.length;
  }

  protected parent(i: number):number {
    return Math.floor((i - 1) / 2);
  }
  protected left(i: number):number  {
    return 2 * i + 1;
  }
  protected right(i: number):number  {
    return 2 * i + 2;
  }

  protected swap(i: number, j: number):void {
    [this.values[i], this.values[j]] = [this.values[j], this.values[i]];
  }

  insert(item: number):void {
    this.values.push(item);
    this.heapifyUp(this.values.length - 1);
  };

  pop(): number{
    const ret:number = this.values[0];
    this.swap(0, this.values.length - 1);
    this.values.pop();
    this.heapifyDown(0);
    return ret;
  }
  peak(): number {
    return this.values[0];
  }

  protected abstract heapifyUp(index: number):void;
  protected abstract heapifyDown(index:number):void;

  print() {
    console.log(this.values);
  }
}

class MinHeap extends Heap{
  protected heapifyUp(index: number) {
    if (index === 0) {
      return;
    }
    const parent = this.parent(index);
    if (this.values[index] < this.values[parent]) {
      this.swap(index, parent);
      this.heapifyUp(parent);
    }
  }

  protected heapifyDown(index: number):void {
    const left = this.left(index);
    if (left >= this.size) { //no left child, we are at a leaf
      return; 
    }
    const right = this.right(index);
    if (right < this.size && this.values[right] < this.values[left]) { //right smaller than left
      if (this.values[right] < this.values[index]) { //right smaller than element
        this.swap(index, right);
        return this.heapifyDown(right);
      }
    }
    if (this.values[left] < this.values[index]) {
      this.swap(index, left);
      return this.heapifyDown(left);
    }
  }
}

class MaxHeap extends Heap{
  protected heapifyUp(index: number) {
    if (index === 0) {
      return;
    }
    const parent = this.parent(index);
    if (this.values[index] > this.values[parent]) {
      this.swap(index, parent);
      this.heapifyUp(parent);
    }
  }

  protected heapifyDown(index: number):void {
    const left = this.left(index);
    if (left >= this.size) { //no left child, we are at a leaf
      return; 
    }
    const right = this.right(index);
    if (right < this.size && this.values[right] > this.values[left]) { //right larger than left
      if (this.values[right] > this.values[index]) { //right larger than element
        this.swap(index, right);
        return this.heapifyDown(right);
      }
    }
    if (this.values[left] > this.values[index]) {
      this.swap(index, left);
      return this.heapifyDown(left);
    }
  }
}


function main() {
  let arr = [9816, 864, 7488, 915, 8089, 480, 6117, 2691, 4841, 8472, 5654, 920, 713, 2883, 2531, 8004, 8028, 8887, 2879, 6200, 7610, 6433, 3744, 5520, 8574, 5359, 5547, 7622, 7758, 5049, 1031, 5826, 4853, 9317, 8980, 5495, 8564, 747, 8189, 791, 8136, 810, 6814, 1936, 9022, 9466, 3627, 120, 8308, 3063, 7843, 7374, 4333, 2363, 6159, 1522, 6443, 5803, 8032, 5440, 9741, 3173, 7361, 9861, 21, 5539, 9721, 97, 7098, 7016, 6357, 8113, 9548, 452, 3512, 9924, 9546, 4856, 3666, 9631, 5207, 856, 4495, 5441, 806, 1198, 2381, 7307, 8237, 514, 7090, 5196, 9262, 2368, 3793, 8373, 214, 9463, 6997, 3413, 6654, 3467, 8569, 3895, 1685, 9542, 9744, 7301, 8527, 1597, 9464, 1467, 368, 6789, 4310, 5371, 896, 1811, 4349, 6081, 9702, 3970, 9057, 423, 6432, 756, 4401, 537, 6057, 3091, 8035, 6184, 289, 8807, 3259, 1879, 7193, 8921, 4775, 6362, 1497, 3140, 2583, 3346, 842, 4408, 7793, 8017, 6044, 3990, 8350, 4201, 5224, 8745, 594, 1517, 5688, 7082, 9795, 5739, 1926, 762, 5683, 9175, 5634, 5884, 4866, 2093, 9140, 4075, 334, 5335, 59, 9918, 2427, 8530, 388, 7427, 7744, 9676, 4709, 8002, 374, 9306, 345, 1712, 6342, 9365, 6121, 3221, 4776, 6843, 5557, 4706, 8354, 4264, 4670, 3073, 2666, 6539, 3925, 766, 9819, 1109, 8430, 8288, 7242, 8420, 406, 8635, 2116, 7439, 1199, 6615, 7076, 8110, 5792, 210, 9094, 2675, 4169, 759, 1128, 3896, 3343, 845, 253, 6989, 7866, 7942, 2434, 8900, 5754, 8386, 4994, 7698, 506, 8588, 6577, 7395, 4611, 9684, 4903, 7330, 5945, 5738, 5087, 6042, 8504, 2321, 2880, 6393, 4833, 4262, 6906, 8027, 4656, 698, 3875, 9107, 7049, 4296, 1802, 5326, 5160, 8099, 2322, 6650, 1289, 5769, 5918, 6608, 6925, 3955, 7574, 4280, 3701, 5855, 8555, 1659, 6011, 8652, 1777, 803, 5981, 8926, 3628, 9019, 8846, 2838, 5070, 7930, 8359, 8820, 2426, 1867, 9665, 464, 9265, 2354, 259, 2194, 8157, 3881, 5498, 9065, 672, 4146, 8385, 5975, 4469, 9342, 4112, 4204, 7966, 560, 1059, 4306, 9755, 518, 7166, 7385, 5103, 4004, 6251, 876, 5312, 9863, 5791, 9305, 115, 8470, 6556, 7527, 1591, 333, 8741, 1105, 9731, 5014, 9158, 1632, 497, 8418, 9815, 4038, 9551, 4346, 4131, 529, 5104, 2263, 9537, 4475, 6595, 6751, 2166, 2564, 3759, 7296, 4547, 9637, 5116, 1433, 5816, 134, 6387, 4879, 86, 3924, 1274, 3708, 4997, 5404, 6914, 1414, 1982, 3583, 573, 4012, 6774, 2593, 8540, 9605, 6850, 8702, 9616, 1844, 8456, 7276, 4892, 1613, 6457, 6264, 2490, 7468, 3195, 9761, 5046, 8934, 382, 1658, 5004, 6261, 9338, 5288, 6790, 3758, 1211, 630, 9821, 2717, 309, 1374, 6511, 3007, 6199, 9150, 9897, 1428, 1832, 1700, 6664, 4877, 8393, 7844, 5820, 5297, 2453, 2860, 8865, 6725, 8413, 1275, 3986, 2126, 8750, 3768, 1637, 3786, 8047, 8808, 9359, 943, 4886, 9763, 5240, 4619, 1630, 8728, 5137, 7708, 3101, 5674, 7732, 5836, 292, 8142, 1513, 1992, 3854, 6046, 9776, 7245, 9295, 4423, 8008, 5565, 1874, 4920, 7038, 2741, 4485, 2127, 4785, 5298, 2756, 5653, 7899, 3676, 2380, 2237, 2926, 9002, 8104, 1349, 116, 2336, 2082, 3390, 1780, 8690, 1683, 7933, 4081, 2863, 9834, 9161, 3518, 9252, 2763, 4412, 8944, 4382, 8376, 1765, 7022, 7037, 9438, 8234, 6066, 8754, 7123, 3323, 2079, 8930, 6811, 4267, 6280, 3935, 2681, 4415, 8123, 6065, 7102, 219, 1578, 4792, 1338, 2945, 5966, 2399, 155, 5697, 9444, 5706, 2458, 1945, 2822, 4199, 2846, 5920, 3957, 2165, 1389, 8262, 5947, 7995, 3815, 7559, 2938, 8826, 5630, 7195, 5731, 2275, 8537, 4543, 8464, 9517, 2164, 9693, 6911, 3686, 3300, 4313, 121, 3551, 5108, 4217, 4729, 2377, 3855, 1500, 7315, 236, 4471, 6272, 3274, 5236, 1518, 8988, 5361, 5512, 3541, 172, 168, 6573, 6533, 3038, 7920, 3993, 156, 8962, 9878, 7937, 6144, 988, 7163, 1585, 5435, 2138, 1543, 6613, 9171, 1007, 428, 223, 556, 3264, 1140, 8637, 3369, 9976, 3284, 2514, 7388, 3474, 56, 4082, 2755, 3521, 9307, 3178, 6525, 716, 8134, 5066, 6412, 1177, 2409, 6681, 6953, 8649, 8998, 703, 5623, 3487, 7457, 2570, 5815, 1835, 7643, 5866, 2718, 1224, 3985, 2366, 7502, 1492, 1320, 4550, 19, 4681, 6983, 2143, 9574, 4405, 6645, 6031, 5254, 2287, 7720, 4507, 8541, 9599, 2748, 5844, 5751, 6445, 1114, 8315, 6734, 8305, 5092, 3068, 9237, 581, 8684, 9279, 8568, 4711, 7213, 2139, 1149, 386, 5824, 8767, 5053, 2629, 9420, 3041, 6610, 3553, 8517, 3819, 4782, 673, 8284, 2895, 7723, 811, 8544, 2776, 4178, 4732, 2578, 6474, 3040, 2258, 6524, 1452, 1387, 8999, 7538, 7367, 9687, 846, 8864, 1182, 2556, 118, 1588, 6122, 6514, 9236, 6886, 1755, 6641, 1417, 3578, 3201, 1197, 2046, 8717, 9216, 9235, 8269, 4463, 2493, 9426, 7860, 4326, 1678, 9586, 5675, 5191, 4367, 740, 9855, 4091, 8651, 5386, 5385, 6278, 3718, 8093, 9097, 387, 1535, 1974, 8814, 3417, 2668, 5735, 3033, 9896, 9642, 1493, 1716, 1669, 3566, 4155, 6593, 6348, 1300, 4570, 5354, 3598, 81, 290, 2787, 327, 1411, 6594, 1908, 4673, 1020, 975, 332, 1710, 4772, 5198, 4472, 5426, 9636, 7702, 9888, 1596, 2618, 4652, 5032, 1957, 8029, 5307, 2027, 9947, 350, 4600, 4008, 5695, 5391, 3934, 8878, 4662, 4712, 7859, 5471, 9481, 9939, 2639, 8774, 1670, 3943, 4482, 4876, 6056, 8931, 5760, 8523, 2877, 8529, 1824, 8860, 1490, 8361, 490, 1584, 1515, 3901, 224, 7998, 7659, 5774, 4266, 9046, 9953, 5982, 1623, 7376, 7152, 4750, 42, 6991, 4985, 5315, 3276, 4351, 3230, 3003, 1189, 3075, 8759, 6739, 2328, 4722, 7219, 3677, 595, 6910, 8410, 8320, 1775, 7246, 8005, 3781, 8547, 8388, 7274, 3395, 5968, 5262, 6004, 997, 3936, 1647, 4079, 9465, 1192, 3362, 2530, 8036, 5888, 2528, 8933, 3825, 9538, 3911, 7480, 1017, 7819, 8392, 5040, 7531, 7172, 5779, 48, 3359, 2176, 2129, 1187, 9014, 8863, 2552, 5644, 6888, 182, 418, 3770, 3640, 4255, 9668, 6587, 9743, 5755, 7153, 8144, 1406, 6052, 4173, 9919, 7465, 2747, 4028, 7, 95, 3034, 8327, 9920, 652, 4592, 4242, 8563, 8573, 981, 619, 4022, 8906, 1365, 6939, 8126, 1455, 7642, 1941, 1913, 4506, 9473, 3004, 9666, 8916, 5410, 1625, 7058, 4165, 3546, 2212, 7938, 9558, 8964, 8162, 1528, 7967, 8489, 3501, 5576, 2547, 4947, 9452, 1299, 3680, 1885, 614, 668, 2704, 6411, 8086, 7919, 7207, 5870, 1262, 498, 7661, 125, 4740, 39, 2757, 2329, 7848, 5897]
  const maxHeap = new MaxHeap();
  const minHeap = new MinHeap();
  for (let a of arr) {
    maxHeap.insert(a);
    minHeap.insert(a);
  }
  maxHeap.print();

  while (maxHeap.size) {
    console.log(maxHeap.pop());
  }
  // while (maxH.size) {
  //   console.log(minHeap.pop());
  // }
}


main();